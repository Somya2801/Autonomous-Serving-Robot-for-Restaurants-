#include<Servo.h>
#include <NewPing.h>
#include <SPI.h>
#include <MFRC522.h>
#define BLYNK_TEMPLATE_ID "TMPL3YxsiHHRp"
#define BLYNK_TEMPLATE_NAME "capstone"
#define BLYNK_AUTH_TOKEN "mVy15bEwRTkl2ojDW8d83h7-zQJVKoES"
/* Comment this out to disable prints and save space */
#define BLYNK_PRINT Serial
#include <ESP8266_Lib.h>
#include <BlynkSimpleShieldEsp8266.h>
//Motor1
#define enA 12
#define in1 10
#define in2 11
//Motor2
#define enB 1
#define in3 2
#define in4 3
//Motor3
#define enC 7
#define in5 9
#define in6 8
//Motor4
#define enD 6
#define in7 5
#define in8 4
////////////////////////ULTRASONIC/////////////////////////////////
#define TRIG_PIN A9
#define ECHO_PIN A8
#define MAX_DISTANCE 250
NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);
//**********6 Channel IR Sensor Connection**********//
#define ir1 A10
#define ir2 A11
#define ir3 A12
#define ir4 A13
#define ir5 A14
#define ir6 A15
//*************************************************//
///////////////////////////////////////////////
/////////////////RFID////////////.//////////////
#define SS_PIN 20
#define RST_PIN 24
MFRC522 mfrc522(SS_PIN, RST_PIN);
// Create MFRC522 instance.
/////////////////////////////////////
//distance ultrasonic
int distance=150;
// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "Malavika";
char pass[] = "Malu_1967";
// Hardware Serial on Mega, Leonardo, Micro...
#define EspSerial Serial1
// or Software Serial on Uno, Nano...
//#include <SoftwareSerial.h>
//SoftwareSerial EspSerial(2, 3); // RX, TX
// Your ESP8266 baud rate:
#define ESP8266_BAUD 38400
ESP8266 wifi(&EspSerial);
// This function will be called every time Slider Widget
//In the Blynk app write values to the Virtual Pin V1
BLYNK_WRITE(V1)
{
int pinValue = param.asInt(); // assigning incoming value from pin V1 to a variable
// process received value
}
switch(pinValue)
{
case 1:String rfidkey="D6 EX 7E 07";
break;
case 2:String rfidkey="A6 FX 6F 09";
break;
case 3:String rfidkey="D2 EF 9F 03";
break;
case 4:String rfidkey="C6 FE 7G 05";
break;
default:String rfidkey="B3 FE 8E 08";
break;
}
void setup() {
pinMode(enA, OUTPUT);
pinMode(enB, OUTPUT);
pinMode(enC, OUTPUT);
pinMode(enD, OUTPUT);
pinMode(in1, OUTPUT);
pinMode(in2, OUTPUT);
pinMode(in3, OUTPUT);
pinMode(in4, OUTPUT);
pinMode(in5, OUTPUT);
pinMode(in6, OUTPUT);
pinMode(in7, OUTPUT);
pinMode(in8, OUTPUT);
//IR ARRAY
pinMode(ir1, INPUT);
pinMode(ir2, INPUT);
pinMode(ir3, INPUT);
pinMode(ir4, INPUT);
pinMode(ir5, INPUT);
pinMode(ir6, INPUT);
//All motors are off
digitalWrite(in1, LOW);
digitalWrite(in2, LOW);
digitalWrite(in3, LOW);
digitalWrite(in4, LOW);
digitalWrite(in5, LOW);
digitalWrite(in6, LOW);
digitalWrite(in7, LOW);
digitalWrite(in8, LOW);
//////////////RFID//////////
Serial.begin(9600); // Initiate a serial communication
SPI.begin(); // Initiate SPI bus
mfrc522.PCD_Init(); // Initiate MFRC522
Serial.println("Approximate your card to the reader...");
Serial.println();
}
void loop() {
distance=readping();
// Serial.print(distance);
Blynk.run();
linefollow();
// put your main code here, to run repeatedly:
}
void linefollow()
{
int s1 = digitalRead(ir1);
int s2 = digitalRead(ir2);
int s3 = digitalRead(ir3);
int s4 = digitalRead(ir4);
int s5 = digitalRead(ir5);
int s6= digitalRead(ir6);
distance=readping();
Serial.println(distance);
readRFID();
if(distance>0 && distance<50)
{
movestop();
}
else
{
if((s1 ==0)&&(s2 ==0)&&(s3 ==0)&&(s4 ==0)&&(s5 ==0)&&(s6 ==0))
{
forward();
}
else if((s2 ==0)&&(s3 ==0)&&(s4 ==0)&&(s5 ==0))
{
forward();
}
else if((s1 ==1)&&(s6 ==0))
{
right();
}
else if((s1 ==0)&&(s6 ==1))
{
left();
}
else
{
movestop();
}
}
}
void forward()
{
//Speed
analogWrite(enA, 255);
analogWrite(enB, 255);
analogWrite(enC, 255);
analogWrite(enD, 255);
//Direction
digitalWrite(in1, HIGH);
digitalWrite(in2, LOW);
digitalWrite(in3, HIGH);
digitalWrite(in4, LOW);
delay(500);
digitalWrite(in5, HIGH);
digitalWrite(in6, LOW);
digitalWrite(in7, HIGH);
digitalWrite(in8, LOW);
delay(500);
}
void movestop()
{
digitalWrite(in1,LOW);
digitalWrite(in2,LOW);
digitalWrite(in3,LOW);
digitalWrite(in4,LOW);
digitalWrite(in5,LOW);
digitalWrite(in6,LOW);
digitalWrite(in7,LOW);
digitalWrite(in8,LOW);
}
void backward()
{
//Speed
analogWrite(enA, 255);
analogWrite(enB, 255);
analogWrite(enC, 255);
analogWrite(enD, 255);
//Direction
digitalWrite(in1, LOW);
digitalWrite(in2, HIGH);
digitalWrite(in3, LOW);
digitalWrite(in4, HIGH);
delay(2000);
digitalWrite(in5, LOW);
digitalWrite(in6, HIGH);
digitalWrite(in7, LOW);
digitalWrite(in8, HIGH);
delay(2000);
}
void left()
{
movestop();
analogWrite(enB, 255);
digitalWrite(in3, HIGH);
digitalWrite(in4, LOW);
delay(2000);
}
void right()
{
movestop();
analogWrite(enA, 255);
digitalWrite(in1, HIGH);
digitalWrite(in2, LOW);
delay(2000);
}
int readping()
{
delay(50);
int cm = sonar.ping_cm();
delay(50);
return cm;
}
void readRFID()
{ if ( ! mfrc522.PICC_IsNewCardPresent())
{
return;
}
// Select one of the cards
if ( ! mfrc522.PICC_ReadCardSerial())
{
return;
}
//Show UID on serial monitor
Serial.print("UID tag :");
String content= "";
byte letter;
for (byte i = 0; i < mfrc522.uid.size; i++)
{
Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
Serial.print(mfrc522.uid.uidByte[i], HEX);
content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
content.concat(String(mfrc522.uid.uidByte[i], HEX));
}
Serial.println();
Serial.print("Message : ");
content.toUpperCase();
if (content.substring(1) == rfidkey) //change here the UID of the card/cards that you want to give access
{ Serial.println("Authorized access");
Serial.println();
deliver();
}
else
{
Serial.println(" Access denied");
Serial.println();
//delay(3000);
}
}
void deliver()
{
turnright();
movestop();
forward();
delay(2000);
movestop();
delay(5000);
uturn();
movestop();
forward();
delay(2000);
turnright();
delay(1000);
}
void turnright()
{
analogWrite(enA, 255);
analogWrite(enB, 255);
analogWrite(enC, 255);
analogWrite(enD, 255);
//Direction
digitalWrite(in1, HIGH);
digitalWrite(in2, LOW);
digitalWrite(in3, LOW);
digitalWrite(in4, HIGH);
digitalWrite(in5, HIGH);
digitalWrite(in6, LOW);
digitalWrite(in7, LOW);
digitalWrite(in8, HIGH);
delay(500);
}
void uturn()
{
analogWrite(enA, 255);
analogWrite(enB, 255);
analogWrite(enC, 255);
analogWrite(enD, 255);
//Direction
digitalWrite(in1, HIGH);
digitalWrite(in2, LOW);
digitalWrite(in3, LOW);
digitalWrite(in4, HIGH);
digitalWrite(in5, HIGH);
digitalWrite(in6, LOW);
digitalWrite(in7, LOW);
digitalWrite(in8, HIGH);
delay(1000);
}
